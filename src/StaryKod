private void vlozPlytko(T pridavany)
{
    Quad<T> curQuad = this.quad;

    while (true)
    {
        if (curQuad.getHlbkaQuady() >= MAX_HLBKA)
        {
            curQuad.getData().add(pridavany);
            break;
        }

        if (!curQuad.jeRozdeleny() && curQuad.getData().isEmpty())
        {
            // Nie je nutne ist nizsie
            curQuad.getData().add(pridavany);
            break;
        }

        boolean podquadyPrazdne = false;
        if (!curQuad.jeRozdeleny())
        {
            curQuad.rozdel();

            if (curQuad.getData().size() == 1)
            {
                // Vytlaceny element hned vlozim
                podquadyPrazdne = this.vlozVytlaceny(curQuad, curQuad.getData().remove(0));
            }
        }

        boolean novyVPodquade = false;
        for (Quad<T> podquad : curQuad.getPodQuady())
        {
            // Polygon sa moze nachadzat v maximalne 1 podquade
            if (podquad.leziVnutri(pridavany))
            {
                curQuad = podquad;
                novyVPodquade = true;
                break;
            }
        }

        // Ziadny podquad nevyhovuje
        if (!novyVPodquade)
        {
            if (curQuad.leziVnutri(pridavany))
            {
                // Ak nebol vlozeny do podquadu, tak nie je nutne, aby tieto existovali
                if (podquadyPrazdne)
                {
                    curQuad.vymazPodquady();
                }

                curQuad.getData().add(pridavany);
                break;
            }
            else
            {
                throw new RuntimeException("Neplatny vkladany element!");
            }
        }
    }
}

// False -> element bol vlozeny do podquadu
// True  -> element bol vlozeny do quadu
private boolean vlozVytlaceny(Quad<T> quad, T vytlaceny)
{
    // Quad bol rozdeleny pred zavolanim tejto metody
    for (Quad<T> podQuad : quad.getPodQuady())
    {
        if (podQuad.leziVnutri(vytlaceny))
        {
            podQuad.getData().add(vytlaceny);
            return false;
        }
    }

    // Vytlaceny element sa nezmesti do ziadneho podquadu
    quad.getData().add(vytlaceny);
    return true;
}



for (int j = 157; j <= 10000; j++)
{
    System.out.println(j + ".");
    GeneratorDat generatorDat = new GeneratorDat(1, 1, Konstanty.X_MIN, Konstanty.Y_MIN, Konstanty.X_MAX, Konstanty.Y_MAX, 10, j, j);

    for (int i = 1; i <= 10000; i++)
    {
        Polygon polygon = generatorDat.getPolygon();
        this.databaza.vlozPolygon(polygon);

        /*
        if (i % 1000 == 0)
        {
            System.out.println("     " + i + ".");
        }
        */
    }

    this.databaza.kontrola();
    this.databaza.inicializujStromy();
    System.gc();
}

public void vlozHlboko(T pridavany)
{
    Quad<T> curQuad = this.quad;

    while (true)
    {
        if (curQuad.getHlbkaQuadu() >= this.maxHlbka)
        {
            curQuad.getData().add(pridavany);
            break;
        }

        if (!curQuad.jeRozdeleny())
        {
            curQuad.rozdel();
        }

        boolean vPodquade = false;
        for (Quad<T> podquad : curQuad.getPodQuady())
        {
            // Polygon sa moze nachadzat v maximalne 1 podquade
            if (podquad.leziVnutri(pridavany))
            {
                curQuad = podquad;
                vPodquade = true;
                break;
            }
        }

        // Ziadny podquad nevyhovuje
        if (!vPodquade)
        {
            if (curQuad.leziVnutri(pridavany))
            {
                curQuad.getData().add(pridavany);
                break;
            }
            else
            {
                throw new RuntimeException("Neplatny vkladany element!");
            }
        }
    }
}

    public void optimalizacia()
    {
        while (true)
        {
            System.out.println("Aktualny stav:");
            for (int i = 0; i < this.maxUroven; i++)
            {
                System.out.println(i + " " +this.pomerHlbka(i));
            }

            double zdravie = this.getZdravie();
            if (zdravie == 0)
            {
                System.out.println("Najhlbsia hlbka je zbytocna, nastava zmena maximalnej hlbky z " + this.maxUroven + " na " + (this.maxUroven - 1));
                this.presunPlytsie(this.maxUroven - 1);
                this.maxUroven--;
            }
            else if (zdravie == 1)
            {
                System.out.println("Najhlbsia hlbka je prilis plna, nastava zmena maximalnej hlbky z " + this.maxUroven + " na " + (this.maxUroven + 1));
                this.presunPlytsie(this.maxUroven - 1);
                this.maxUroven--;
            }
            else
            {
                break;
            }
        }
    }

    private double getZdravie()
    {
        return this.transform(this.pomerHlbka(this.maxUroven));
    }

    // Transformacia vysledku na interval <0; 1>
    // 0      => Najhlbsi quad je prilis prazdny
    // (0; 1) => Najhlbsi quad je vyhovujuco plny
    // 1      => Najhlbsi quad je prilis plny
    private double transform(double vstup)
    {
        if (vstup <= PRILIS_PRAZDNE)
        {
            return 0;
        }
        else if (vstup >= PRILIS_PLNE)
        {
            return 1;
        }
        else
        {
            return vstup * (1.0 / (PRILIS_PLNE - PRILIS_PRAZDNE + 1));
        }
    }

    // Kolko percent zo vsetkych dat sa nachadza v danej hlbke
    private double pomerHlbka(int hlbka)
    {
        int pocetCelkom = this.getPocetElementov();
        int pocetHlbka = 0;

        Stack<Quad<T>> zasobnik = new Stack<>();
        zasobnik.push(this.getRootQuad());

        while (!zasobnik.isEmpty())
        {
            Quad<T> curQuad = zasobnik.pop();

            if (curQuad.jeRozdeleny())
            {
                for (Quad<T> podQuad : curQuad.getPodQuady())
                {
                    zasobnik.push(podQuad);
                }
            }

            if (curQuad.getUrovenQuadu() == hlbka)
            {
                pocetHlbka += curQuad.getData().size();
            }
        }

        return (double)pocetHlbka / pocetCelkom * 100;
    }